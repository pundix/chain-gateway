// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const createCheckRule = `-- name: CreateCheckRule :execresult
INSERT INTO check_rule (
  chain_id, source, rules, created_at
) VALUES (
  ?, ?, ?, ?
)
`

type CreateCheckRuleParams struct {
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
	Rules     string `json:"rules"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateCheckRule(ctx context.Context, arg CreateCheckRuleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCheckRule,
		arg.ChainID,
		arg.Source,
		arg.Rules,
		arg.CreatedAt,
	)
}

const createKvCache = `-- name: CreateKvCache :execresult
INSERT INTO kv_cache (
  ` + "`" + `key` + "`" + `, ` + "`" + `value` + "`" + `, created_at
) VALUES (
  ?, ?, ?
)
`

type CreateKvCacheParams struct {
	Key       string `json:"key"`
	Value     string `json:"value"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateKvCache(ctx context.Context, arg CreateKvCacheParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createKvCache, arg.Key, arg.Value, arg.CreatedAt)
}

const createReadyUpstream = `-- name: CreateReadyUpstream :execresult
INSERT INTO ready_upstream (
  chain_id, source, rpc, created_at
) VALUES (
  ?, ?, ?, ?
)
`

type CreateReadyUpstreamParams struct {
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
	Rpc       string `json:"rpc"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateReadyUpstream(ctx context.Context, arg CreateReadyUpstreamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReadyUpstream,
		arg.ChainID,
		arg.Source,
		arg.Rpc,
		arg.CreatedAt,
	)
}

const createSecretKey = `-- name: CreateSecretKey :execresult
INSERT INTO secret_key (
  access_key, secret_key, ` + "`" + `service` + "`" + `, ` + "`" + `group` + "`" + `, created_at
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateSecretKeyParams struct {
	AccessKey string `json:"access_key"`
	SecretKey string `json:"secret_key"`
	Service   string `json:"service"`
	Group     string `json:"group"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateSecretKey(ctx context.Context, arg CreateSecretKeyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSecretKey,
		arg.AccessKey,
		arg.SecretKey,
		arg.Service,
		arg.Group,
		arg.CreatedAt,
	)
}

const createUpstream = `-- name: CreateUpstream :execresult
INSERT INTO upstream (
  chain_id, source, rpc, created_at
) VALUES (
  ?, ?, ?, ?
)
`

type CreateUpstreamParams struct {
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
	Rpc       string `json:"rpc"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateUpstream(ctx context.Context, arg CreateUpstreamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUpstream,
		arg.ChainID,
		arg.Source,
		arg.Rpc,
		arg.CreatedAt,
	)
}

const delReadyUpstreamByChainIdSource = `-- name: DelReadyUpstreamByChainIdSource :exec
DELETE FROM ready_upstream 
WHERE chain_id = ? AND source = ?
`

type DelReadyUpstreamByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) DelReadyUpstreamByChainIdSource(ctx context.Context, arg DelReadyUpstreamByChainIdSourceParams) error {
	_, err := q.db.ExecContext(ctx, delReadyUpstreamByChainIdSource, arg.ChainID, arg.Source)
	return err
}

const delReadyUpstreamBySource = `-- name: DelReadyUpstreamBySource :exec
DELETE FROM ready_upstream 
WHERE source = ?
`

func (q *Queries) DelReadyUpstreamBySource(ctx context.Context, source string) error {
	_, err := q.db.ExecContext(ctx, delReadyUpstreamBySource, source)
	return err
}

const delUpstreamByChainIdSource = `-- name: DelUpstreamByChainIdSource :exec
DELETE FROM upstream 
WHERE chain_id = ? AND source = ?
`

type DelUpstreamByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) DelUpstreamByChainIdSource(ctx context.Context, arg DelUpstreamByChainIdSourceParams) error {
	_, err := q.db.ExecContext(ctx, delUpstreamByChainIdSource, arg.ChainID, arg.Source)
	return err
}

const delUpstreamBySource = `-- name: DelUpstreamBySource :exec
DELETE FROM upstream 
WHERE source = ?
`

func (q *Queries) DelUpstreamBySource(ctx context.Context, source string) error {
	_, err := q.db.ExecContext(ctx, delUpstreamBySource, source)
	return err
}

const getKvCacheByKey = `-- name: GetKvCacheByKey :one
SELECT id, ` + "`" + `key` + "`" + `, value, created_at FROM kv_cache 
WHERE ` + "`" + `key` + "`" + ` = ? LIMIT 1
`

func (q *Queries) GetKvCacheByKey(ctx context.Context, key string) (KvCache, error) {
	row := q.db.QueryRowContext(ctx, getKvCacheByKey, key)
	var i KvCache
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getReadyUpstreamByChainIdSource = `-- name: GetReadyUpstreamByChainIdSource :one
SELECT id, chain_id, source, rpc, created_at FROM ready_upstream 
WHERE chain_id = ? AND source = ? LIMIT 1
`

type GetReadyUpstreamByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) GetReadyUpstreamByChainIdSource(ctx context.Context, arg GetReadyUpstreamByChainIdSourceParams) (ReadyUpstream, error) {
	row := q.db.QueryRowContext(ctx, getReadyUpstreamByChainIdSource, arg.ChainID, arg.Source)
	var i ReadyUpstream
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.Source,
		&i.Rpc,
		&i.CreatedAt,
	)
	return i, err
}

const getSecretKeyByAccessKey = `-- name: GetSecretKeyByAccessKey :one
SELECT id, access_key, secret_key, service, ` + "`" + `group` + "`" + `, created_at, allow_origins, allow_ips FROM secret_key 
WHERE access_key = ?
`

func (q *Queries) GetSecretKeyByAccessKey(ctx context.Context, accessKey string) (SecretKey, error) {
	row := q.db.QueryRowContext(ctx, getSecretKeyByAccessKey, accessKey)
	var i SecretKey
	err := row.Scan(
		&i.ID,
		&i.AccessKey,
		&i.SecretKey,
		&i.Service,
		&i.Group,
		&i.CreatedAt,
		&i.AllowOrigins,
		&i.AllowIps,
	)
	return i, err
}

const listCheckRulesByChainIdSource = `-- name: ListCheckRulesByChainIdSource :many
SELECT id, chain_id, source, rules, created_at FROM check_rule 
WHERE chain_id =? AND source = ?
`

type ListCheckRulesByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) ListCheckRulesByChainIdSource(ctx context.Context, arg ListCheckRulesByChainIdSourceParams) ([]CheckRule, error) {
	rows, err := q.db.QueryContext(ctx, listCheckRulesByChainIdSource, arg.ChainID, arg.Source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckRule
	for rows.Next() {
		var i CheckRule
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rules,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCheckRulesBySource = `-- name: ListCheckRulesBySource :many
SELECT id, chain_id, source, rules, created_at FROM check_rule 
WHERE source = ?
`

func (q *Queries) ListCheckRulesBySource(ctx context.Context, source string) ([]CheckRule, error) {
	rows, err := q.db.QueryContext(ctx, listCheckRulesBySource, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckRule
	for rows.Next() {
		var i CheckRule
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rules,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCheckRulesBySourceNotEq = `-- name: ListCheckRulesBySourceNotEq :many
SELECT id, chain_id, source, rules, created_at FROM check_rule 
WHERE source != ?
`

func (q *Queries) ListCheckRulesBySourceNotEq(ctx context.Context, source string) ([]CheckRule, error) {
	rows, err := q.db.QueryContext(ctx, listCheckRulesBySourceNotEq, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckRule
	for rows.Next() {
		var i CheckRule
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rules,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCheckRulesInChainIdsAndSourceNotEq = `-- name: ListCheckRulesInChainIdsAndSourceNotEq :many
SELECT id, chain_id, source, rules, created_at FROM check_rule 
WHERE chain_id IN (/*SLICE:chainIds*/?) AND source!=?
`

type ListCheckRulesInChainIdsAndSourceNotEqParams struct {
	ChainIds []string `json:"chainIds"`
	Source   string   `json:"source"`
}

func (q *Queries) ListCheckRulesInChainIdsAndSourceNotEq(ctx context.Context, arg ListCheckRulesInChainIdsAndSourceNotEqParams) ([]CheckRule, error) {
	query := listCheckRulesInChainIdsAndSourceNotEq
	var queryParams []interface{}
	if len(arg.ChainIds) > 0 {
		for _, v := range arg.ChainIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:chainIds*/?", strings.Repeat(",?", len(arg.ChainIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:chainIds*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Source)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckRule
	for rows.Next() {
		var i CheckRule
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rules,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKvCacheInKeys = `-- name: ListKvCacheInKeys :many
SELECT id, ` + "`" + `key` + "`" + `, value, created_at FROM kv_cache 
WHERE ` + "`" + `key` + "`" + ` IN (/*SLICE:keys*/?)
`

func (q *Queries) ListKvCacheInKeys(ctx context.Context, keys []string) ([]KvCache, error) {
	query := listKvCacheInKeys
	var queryParams []interface{}
	if len(keys) > 0 {
		for _, v := range keys {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:keys*/?", strings.Repeat(",?", len(keys))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:keys*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KvCache
	for rows.Next() {
		var i KvCache
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReadyUpstreamsByChainIdSource = `-- name: ListReadyUpstreamsByChainIdSource :many
SELECT id, chain_id, source, rpc, created_at FROM ready_upstream 
WHERE chain_id = ? AND source = ?
`

type ListReadyUpstreamsByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) ListReadyUpstreamsByChainIdSource(ctx context.Context, arg ListReadyUpstreamsByChainIdSourceParams) ([]ReadyUpstream, error) {
	rows, err := q.db.QueryContext(ctx, listReadyUpstreamsByChainIdSource, arg.ChainID, arg.Source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadyUpstream
	for rows.Next() {
		var i ReadyUpstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReadyUpstreamsByChainIdSourceNotEq = `-- name: ListReadyUpstreamsByChainIdSourceNotEq :many
SELECT id, chain_id, source, rpc, created_at FROM ready_upstream 
WHERE chain_id = ? AND source != ?
`

type ListReadyUpstreamsByChainIdSourceNotEqParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) ListReadyUpstreamsByChainIdSourceNotEq(ctx context.Context, arg ListReadyUpstreamsByChainIdSourceNotEqParams) ([]ReadyUpstream, error) {
	rows, err := q.db.QueryContext(ctx, listReadyUpstreamsByChainIdSourceNotEq, arg.ChainID, arg.Source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadyUpstream
	for rows.Next() {
		var i ReadyUpstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReadyUpstreamsBySource = `-- name: ListReadyUpstreamsBySource :many
SELECT id, chain_id, source, rpc, created_at FROM ready_upstream 
WHERE source = ?
`

func (q *Queries) ListReadyUpstreamsBySource(ctx context.Context, source string) ([]ReadyUpstream, error) {
	rows, err := q.db.QueryContext(ctx, listReadyUpstreamsBySource, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadyUpstream
	for rows.Next() {
		var i ReadyUpstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretKeys = `-- name: ListSecretKeys :many
SELECT id, access_key, secret_key, service, ` + "`" + `group` + "`" + `, created_at, allow_origins, allow_ips FROM secret_key
`

func (q *Queries) ListSecretKeys(ctx context.Context) ([]SecretKey, error) {
	rows, err := q.db.QueryContext(ctx, listSecretKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecretKey
	for rows.Next() {
		var i SecretKey
		if err := rows.Scan(
			&i.ID,
			&i.AccessKey,
			&i.SecretKey,
			&i.Service,
			&i.Group,
			&i.CreatedAt,
			&i.AllowOrigins,
			&i.AllowIps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpstreams = `-- name: ListUpstreams :many
SELECT id, chain_id, source, rpc, created_at FROM upstream
`

func (q *Queries) ListUpstreams(ctx context.Context) ([]Upstream, error) {
	rows, err := q.db.QueryContext(ctx, listUpstreams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpstreamsByChainIdSource = `-- name: ListUpstreamsByChainIdSource :many
SELECT id, chain_id, source, rpc, created_at FROM upstream 
WHERE chain_id = ? AND source = ?
`

type ListUpstreamsByChainIdSourceParams struct {
	ChainID string `json:"chain_id"`
	Source  string `json:"source"`
}

func (q *Queries) ListUpstreamsByChainIdSource(ctx context.Context, arg ListUpstreamsByChainIdSourceParams) ([]Upstream, error) {
	rows, err := q.db.QueryContext(ctx, listUpstreamsByChainIdSource, arg.ChainID, arg.Source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpstreamsBySource = `-- name: ListUpstreamsBySource :many
SELECT id, chain_id, source, rpc, created_at FROM upstream 
WHERE source = ?
`

func (q *Queries) ListUpstreamsBySource(ctx context.Context, source string) ([]Upstream, error) {
	rows, err := q.db.QueryContext(ctx, listUpstreamsBySource, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpstreamsBySourceNotEq = `-- name: ListUpstreamsBySourceNotEq :many
SELECT id, chain_id, source, rpc, created_at FROM upstream 
WHERE source != ?
`

func (q *Queries) ListUpstreamsBySourceNotEq(ctx context.Context, source string) ([]Upstream, error) {
	rows, err := q.db.QueryContext(ctx, listUpstreamsBySourceNotEq, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpstreamsInChainIdsAndSourceNotEq = `-- name: ListUpstreamsInChainIdsAndSourceNotEq :many
SELECT id, chain_id, source, rpc, created_at FROM upstream 
WHERE chain_id IN (/*SLICE:chainIds*/?) AND source!=?
`

type ListUpstreamsInChainIdsAndSourceNotEqParams struct {
	ChainIds []string `json:"chainIds"`
	Source   string   `json:"source"`
}

func (q *Queries) ListUpstreamsInChainIdsAndSourceNotEq(ctx context.Context, arg ListUpstreamsInChainIdsAndSourceNotEqParams) ([]Upstream, error) {
	query := listUpstreamsInChainIdsAndSourceNotEq
	var queryParams []interface{}
	if len(arg.ChainIds) > 0 {
		for _, v := range arg.ChainIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:chainIds*/?", strings.Repeat(",?", len(arg.ChainIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:chainIds*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Source)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upstream
	for rows.Next() {
		var i Upstream
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Source,
			&i.Rpc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCheckRule = `-- name: UpdateCheckRule :execresult
UPDATE check_rule SET rules = ?, created_at = ? 
WHERE chain_id = ? AND source = ?
`

type UpdateCheckRuleParams struct {
	Rules     string `json:"rules"`
	CreatedAt int64  `json:"created_at"`
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
}

func (q *Queries) UpdateCheckRule(ctx context.Context, arg UpdateCheckRuleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCheckRule,
		arg.Rules,
		arg.CreatedAt,
		arg.ChainID,
		arg.Source,
	)
}

const updateKvCacheValue = `-- name: UpdateKvCacheValue :execresult
UPDATE kv_cache SET ` + "`" + `value` + "`" + ` = ?, created_at = ? 
WHERE ` + "`" + `key` + "`" + ` = ?
`

type UpdateKvCacheValueParams struct {
	Value     string `json:"value"`
	CreatedAt int64  `json:"created_at"`
	Key       string `json:"key"`
}

func (q *Queries) UpdateKvCacheValue(ctx context.Context, arg UpdateKvCacheValueParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateKvCacheValue, arg.Value, arg.CreatedAt, arg.Key)
}

const updateReadyUpstreamRpc = `-- name: UpdateReadyUpstreamRpc :execresult
UPDATE ready_upstream SET rpc = ?, created_at = ? 
WHERE chain_id = ? AND source = ?
`

type UpdateReadyUpstreamRpcParams struct {
	Rpc       string `json:"rpc"`
	CreatedAt int64  `json:"created_at"`
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
}

func (q *Queries) UpdateReadyUpstreamRpc(ctx context.Context, arg UpdateReadyUpstreamRpcParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateReadyUpstreamRpc,
		arg.Rpc,
		arg.CreatedAt,
		arg.ChainID,
		arg.Source,
	)
}

const updateUpstreamRpc = `-- name: UpdateUpstreamRpc :execresult
UPDATE upstream SET rpc = ?, created_at = ? 
WHERE chain_id = ? AND source = ?
`

type UpdateUpstreamRpcParams struct {
	Rpc       string `json:"rpc"`
	CreatedAt int64  `json:"created_at"`
	ChainID   string `json:"chain_id"`
	Source    string `json:"source"`
}

func (q *Queries) UpdateUpstreamRpc(ctx context.Context, arg UpdateUpstreamRpcParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUpstreamRpc,
		arg.Rpc,
		arg.CreatedAt,
		arg.ChainID,
		arg.Source,
	)
}
